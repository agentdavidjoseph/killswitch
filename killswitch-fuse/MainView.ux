<App>
	<JavaScript>
		// The frameworks
        var Observable = require("FuseJS/Observable");
        var Api = require("js/api.js");
        var md5 = require("js/md5.js");

        // UX bindings
        var sessionName = Observable();
        var sessionUsername = Observable();
        var sessionToken = Observable();
        var apiBusy = Observable();
        var apiError = Observable();
        var apiKillswitch = Observable();
        var apiAuthenticated = Observable();
		var apiUrls = Observable(Api.urls);
		var activeState = Observable("");
		var statusOutputText = Observable("");
		var statusTextAnimateJS = Observable(false);
		var signupName = Observable();
		var signupEmail = Observable();
		var signupPassword = Observable();
		var loginEmail = Observable();
		var loginPassword = Observable();
		var statusTextDelayedText = "";
		var hideStatus = false;


		// Init the status text field
		setStatusText('');

        // Subscriber for the API (updating UX binds - couldn't find another way to do this)
        Api.subscribers.push(updateBindings);
		Api.subscribers.push(navigate);

		// Primarily deals with updating UX bindings (though a tad of navigation occurs)
		function updateBindings() {
			sessionName.value = Api.session.name;
            sessionUsername.value = Api.session.username;
            sessionToken.value = Api.session.token;
            apiBusy.value = Api.busy;
            apiError.value = Api.lastError;
            apiKillswitch.value = Api.killswitch;
            apiAuthenticated.value = Api.authenticated;

			// Status text
			// .busy means we called updateBindings() manually - probably to push out something to the UX
			if (Api.lastError && !Api.busy) { 
				setStatusText('Error: ' + Api.lastError);
				console.log(Api.lastError);
			} else if (!Api.lastError && !Api.busy) {
				setStatusText('');
			}
		}

		// Primarily deals with (delayed) navigation
		function navigate(sender) {
			
			// Callback after Api.addUser() completes
			if (sender == 'addUser') {

				// Reset status text tracking
				statusTextAnimateJS.value = false;
				hideStatus = false;

				if (Api.lastError) {
					return; // Error display dealt with elsewhere
				}

				// Navigate if required
				if (activeState.value != 'mainState') {
					activeState.value = 'mainState';
				}
				return;
			}

			// Callback after Api.login() completes
			if (sender == 'login') {

				// Reset status text tracking
				statusTextAnimateJS.value = false;
				hideStatus = false;

				if (Api.lastError) {
					return; // Error display dealt with elsewhere
				}

				// Navigate if required
				if (activeState.value != 'mainState') {
					activeState.value = 'mainState';
				}
				return;
			}

			// Callback after Api.update() completes
			if (sender == 'update') {

				// Reset status text tracking
				statusTextAnimateJS.value = false;
				hideStatus = false;

				if (Api.lastError) {
					return; // Error display dealt with elsewhere
				}

				// Navigate if required
				if (activeState.value != 'mainState') {
					activeState.value = 'mainState';
				}
				return;
			}

			// Session has expired
			if (!Api.authenticated && !Api.busy) {
				activeState.value = 'loginButtonState';
				setStatusText('Session expired. Please log in again');
			}
		}

		// Button based navigation
		function changeState(args) {
			//console.log(args.sender);
			if (args.sender == 'signupButton') {
				activeState.value = 'signupFormState';
			} else if (args.sender == 'loginButton') {
				activeState.value = 'loginFormState';
			} else if (args.sender == 'signupButtonOK') {
				// do an actual signup here
				//activeState.value = 'mainState';
				signup();
				//setStatusText('');
			} else if (args.sender == 'loginButtonOK') {
				// do an actual login here
				//activeState.value = 'mainState';
				login();
				//setStatusText('');
			} else if (args.sender == 'signupButtonCancel' || args.sender == 'loginButtonCancel') {
				activeState.value = 'loginButtonState';
				setStatusText('');
			}
		}

		// ChangeState callback (because it won't always take place from a button click)
		function changeStateCallback() {
			if (activeState.value == 'signupFormState') {
				setStatusText('Create a Killswitch account');
			} else if (activeState.value == 'loginFormState') {
				setStatusText('Sign in to your Killswitch account');
			} else if (activeState.value == 'loginButtonState' || activeState.value == 'loadingPanel' || activeState.value == 'mainState') {
				//setStatusText('');
			} else if (activeState.value == 'mainState') {
				//refresh();
			}
		}

		// Sets the status text
		function setStatusText(text) {
			console.log('setting status to: ' + text);
			statusTextAnimateJS.value = true;
			statusTextDelayedText = text;
		}

		// Resets the status text animation back to a resting state
		function resetStatusAnim() {
			if (!hideStatus) {
				statusTextAnimateJS.value = false;
				statusOutputText.value = statusTextDelayedText;
			}
		}

		// Sign up
		function signup() {
			var email = signupEmail.value.trim();
			var name = signupName.value.trim();
			var password = signupPassword.value.trim();

			if (email.length == 0) {
				setStatusText('An email address is required');
				return;
			}
			if (name.length == 0) {
				setStatusText('You forgot to fill in your name');
				return;
			}
			if (password.length == 0) {
				setStatusText('A password is required');
				return;
			}

			apiBusy.value = true;
			statusTextAnimateJS.value = true;
			hideStatus = true;
			password = md5(password);
			Api.addUser(name, email, password);
		}

		// Login
		function login() {
			var email = loginEmail.value.trim();
			var password = loginPassword.value.trim();

			if (email.length == 0) {
				setStatusText('An email address is required');
				return;
			}
			if (password.length == 0) {
				setStatusText('A password is required');
				return;
			}

			apiBusy.value = true;
			statusTextAnimateJS.value = true;
			hideStatus = true;
			password = md5(password);
			Api.login(email, password);
		}

		// Log out
		function logOut() {
			console.log('trying to log out...');
			Api.session.clear();
			Api.authenticated = false;
			activeState.value = 'loginButtonState';
			updateBindings();
		}

		// User clicked the killswitch lock icon
		function killswitchClick() {
			Api.killswitch = !Api.killswitch;
			updateBindings();
		}

		// Refresh API and UX
		function refresh() {
			Api.update();
			updateBindings();
		}

		//temp
		function dummy() {
			apiBusy.value = true;
			statusTextAnimateJS.value = true;
			hideStatus = true;
			setTimeout(function(){ 
				apiBusy.value = false;
				statusTextAnimateJS.value = false;
				hideStatus = false;
				activeState.value = 'mainState';
			}, 4000);
		}

		// Check if we have a valid session
        if (Api.session.token != '') {
            console.log('Found token, refreshing data');
            Api.update();
			updateBindings();
        } else {
            console.log('Need to log in');
			activeState.value = 'loginButtonState';
        }

		// Lastly, update the bindings
		updateBindings();


        // Export UX bindings
        module.exports = {
            sessionName: sessionName,
            sessionUsername: sessionUsername,
            sessionToken: sessionToken,
            apiBusy: apiBusy,
            apiError: apiError,
            apiKillswitch: apiKillswitch,
            apiAuthenticated: apiAuthenticated,
			activeState: activeState,
			changeState: changeState,
			statusOutputText: statusOutputText,
			changeStateCallback: changeStateCallback,
			statusTextAnimateJS: statusTextAnimateJS,
			resetStatusAnim: resetStatusAnim,
			apiUrls: apiUrls,
			logOut: logOut,
			killswitchClick: killswitchClick,
			refresh: refresh,
			signupName: signupName,
			signupEmail: signupEmail,
			signupPassword: signupPassword,
			loginEmail: loginEmail,
			loginPassword: loginPassword
        };

	</JavaScript>
	<Fuse.iOS.StatusBarConfig Style="Light" />

	<ClientPanel Color="ThemeBlue">
		<EdgeNavigator ux:Name="edgeNav" IsEnabled="false">

			<!-- Sidebar -->
			<Panel ux:Name="sidebar" Edge="Left" Width="100%" Margin="0,0,56,0" Background="#37474F" Opacity=".95">
				<Shadow ux:Name="shadow" Angle="180" Distance="8" Size="16" Color="#0000" />
				<StackPanel Padding="10">
					<Text Value="{sessionName}" Color="White" FontSize="14" Alignment="VerticalCenter" />				
					<Text Value="{sessionUsername}" Color="White" FontSize="14" Alignment="VerticalCenter" />
					<TextSeparator Margin="0, 15, 0, 20" Color="#ffffff" />
					<MenuLink Text="Change password" URL="{apiUrls.changePassword}" />
					<MenuAction Text="Log out" Callback="{logOut}" NavToggle="sidebar" />
					<MenuLink Text="Delete account" URL="{apiUrls.deleteAccount}" />
					<MenuLink Text="Killswitch website" URL="{apiUrls.website}" />
				</StackPanel>
				<Panel Alignment="Bottom">
					<Text Value="Version: 1.0" Color="White" FontSize="11" Margin="10, 20, 0, 20" Alignment="Bottom" />
				</Panel>
				<ActivatingAnimation>
					<Change shadow.Color="#0004" />
					<Change sidebarFade.Opacity="1" />
					<Change mainPanel.HitTestMode="None"/>
				</ActivatingAnimation>
			</Panel>

			<!-- Main view -->
			<HidingPanel ux:Name="topPanel">
				<GridLayout Rows="60,1*" />
					<WhileEnabled>
						<Change navBarTrans.Y="0" Duration="0.4" />
					</WhileEnabled>

					<!-- Top row grid -->
					<Grid Columns="70,1*,70">
						<Translation ux:Name="navBarTrans" RelativeTo="Size" Y="-0.2" />

						<!-- Hamburger menu. Currently brings us back to login screen -->
						<Panel HitTestMode="LocalBoundsAndChildren">
							<Hamburger Alignment="Left">
								<Clicked>
									<NavigateToggle Target="sidebar" />
								</Clicked>
							</Hamburger>
						</Panel>

						<!-- Header text -->
						<Text Value="Killswitch" Color="White" FontSize="20" Alignment="VerticalCenter" />

						<!-- Reload button -->
						<Image ux:Name="reload" File="icons/refresh.png" Width="20" Alignment="VerticalCenter">
							<Clicked>
								<Callback Handler="{refresh}" />
							</Clicked>
							<WhileTrue Value="{apiBusy}">
								<Spin Target="reload" Frequency="2" />
							</WhileTrue>
						</Image>
					</Grid>

					<!-- Main feed -->
					<DockPanel>
						<Rectangle ux:Name="sidebarFade" Layer="Overlay" Color="#0005" Opacity="0" HitTestMode="None" />
						<HidingPanel ux:Name="mainPanel" Opacity="0">
							<Clicked>
								<Callback Handler="{killswitchClick}" />
							</Clicked>
							<WhileTrue Value="{apiBusy}">
								<Change mainPanel.Opacity="0.2" Duration="0.2" />
								<!-- <Scale Factor="0" Duration=".1" /> -->
								<!-- <Change loadingPanel.Opacity="1" Duration=".1" /> -->
							</WhileTrue>
							<WhileTrue Value="{apiKillswitch}">
								<StackPanel Alignment="Top">
									<Image ux:Name="lockIcon" File="icons/locked_290px.png" Width="290" Margin="0, 100, 0, 0" />
									<Text Value="Tap to unlock" TextAlignment="Center" Color="White" FontSize="20" Margin="0,20,0,0" />
								</StackPanel>
								<WhileTrue Value="{apiBusy}">
									<Change loadingPanel.LayoutMaster="lockIcon" />
								</WhileTrue>
							</WhileTrue>
							<WhileFalse Value="{apiKillswitch}">
								<StackPanel Alignment="Top">
									<Image ux:Name="unlockIcon" File="icons/unlocked_290px.png" Width="290" Margin="0, 100, 0, 0" />
									<Text Value="Tap to lock" TextAlignment="Center" Color="White" FontSize="20" Margin="0,20,0,0" />
								</StackPanel>
								<WhileTrue Value="{apiBusy}">
									<Change loadingPanel.LayoutMaster="unlockIcon" />
								</WhileTrue>
							</WhileFalse>
						</HidingPanel>
					</DockPanel>
			</HidingPanel>
		</EdgeNavigator>

		<!-- Loading indicator (blank screen, spinnding gizmo) -->
		<LoadingPanel ux:Name="loadingPanel" Opacity="0" ThemeColor="#fff">
			<WhileTrue Value="{apiBusy}">
				<Change loadingPanel.Opacity="1" Duration=".1" />
			</WhileTrue>
		</LoadingPanel>

		<!-- Status text (bottom screen) -->
		<Panel ux:Name="statusOutput" Visibility="Hidden" Height="25" Padding="0, 0, 0, 20" Alignment="Bottom" Opacity="1">
			<Text ux:Name="statusOutputText" Value="{statusOutputText}" Color="#ffffff" FontSize="15" Alignment="TopCenter" />
			<WhileTrue Value="{statusTextAnimateJS}">
				<Move Y="30" Duration=".2" />
				<!-- <Change statusOutput.Opacity="0" Duration="0.2" /> -->
				<!-- <WhileFalse Value="{statusTextHideJS}"> -->
					<Callback Handler="{resetStatusAnim}" Delay=".2" />
				<!-- </WhileFalse> -->
			</WhileTrue>
			<WhileFalse Value="{statusTextAnimateJS}">
				<Move Y="0" Duration=".2" />
				<!-- <Change statusOutput.Opacity="1" Duration="0.2" /> -->
			</WhileFalse>
		</Panel>

		<!-- Sign up form -->
		<HidingPanel ux:Name="signupForm" Width="90%" Height="45%" Offset="0%,10%">
			<Grid RowCount="3" Margin="30,40,30,70">
				<TextInput ux:Name="signupName" PlaceholderText="Name" Value="{signupName}" Opacity="1" Alignment="VerticalCenter" PlaceholderColor="#888" />
				<TextSeparator />
				<TextInput ux:Name="signupEmail" PlaceholderText="Email" Value="{signupEmail}" InputHint="Email" Opacity="1" Alignment="VerticalCenter" PlaceholderColor="#888" />
				<TextSeparator />
				<TextInput ux:Name="signupPassword" IsPassword="true" Value="{signupPassword}" PlaceholderText="Password" Opacity="1" Alignment="VerticalCenter" PlaceholderColor="#888" />
				<TextSeparator />
			</Grid>
			<WhileEnabled>
				<Change signupName.Opacity="1" Duration="0.4" />
				<Change signupEmail.Opacity="1" Duration="0.4" Delay="0.15" />
				<Change signupPassword.Opacity="1" Duration="0.4" Delay="0.3" />
				<Change loadingPanel.LayoutMaster="signupForm" />
				
				<WhileTrue Value="{apiBusy}">
					<Change signupForm.Opacity="0.2" Duration="0.2" />
					<Change showWhiteRectSignup.Value="false" />
					<Change whiteRectSignup.Opacity="0.2" Duration="0.2" />
					<Change signupButtonOK.IsEnabled="false" />
					<Change signupButtonCancel.IsEnabled="false" />
					<Change signupButtonOK.Opacity="0.2" Duration="0.2" />
					<Change signupButtonCancel.Opacity="0.2" Duration="0.2" />
					<!-- <Scale Factor="0" Duration=".1" /> -->
					<!-- <Change loadingPanel.Opacity="1" Duration=".1" /> -->
				</WhileTrue>
			</WhileEnabled>
			<Panel>
				<StackPanel Orientation="Horizontal" Alignment="BottomCenter" ItemSpacing="20">
					<Panel ux:Name="signupButtonOK" Width="100" Offset="0%,50%" Height="40" HitTestMode="LocalBoundsAndChildren">
						<Rectangle Color="Green" CornerRadius="10">
							<Text Value="DONE" Alignment="Center" Color="White" />
						</Rectangle>
						<Clicked>
							<Callback Handler="{changeState}" />
						</Clicked>
					</Panel>
					<Panel ux:Name="signupButtonCancel" Width="100" Offset="0%,50%" Height="40" HitTestMode="LocalBoundsAndChildren">
						<Rectangle Color="Green" CornerRadius="10">
							<Text Value="CANCEL" Alignment="Center" Color="White" />
						</Rectangle>
						<Clicked>
							<Callback Handler="{changeState}" />
						</Clicked>
					</Panel>
				</StackPanel>
			</Panel>
		</HidingPanel>

		<!-- Login form -->
		<HidingPanel ux:Name="loginForm" Width="90%" Height="35%" Offset="0%,10%">
			<Grid RowCount="2" Margin="30,40,30,70">
				<TextInput ux:Name="loginEmail" PlaceholderText="Email" Value="{loginEmail}" InputHint="Email" Opacity="1" Alignment="VerticalCenter" PlaceholderColor="#888" />
				<TextSeparator />
				<TextInput ux:Name="loginPassword" IsPassword="true" Value="{loginPassword}" PlaceholderText="Password" Opacity="1" Alignment="VerticalCenter" PlaceholderColor="#888" />
				<TextSeparator />
			</Grid>
			<WhileEnabled>
				<Change loginEmail.Opacity="1" Duration="0.4" />
				<Change loginPassword.Opacity="1" Duration="0.4" Delay="0.3" />
				<Change loadingPanel.LayoutMaster="loginForm" />
				
				<WhileTrue Value="{apiBusy}">
					<Change loginForm.Opacity="0.2" Duration="0.2" />
					<Change showWhiteRectLogin.Value="false" />
					<Change whiteRectLogin.Opacity="0.2" Duration="0.2" />
					<Change loginButtonOK.IsEnabled="false" />
					<Change loginButtonCancel.IsEnabled="false" />
					<Change loginButtonOK.Opacity="0.2" Duration="0.2" />
					<Change loginButtonCancel.Opacity="0.2" Duration="0.2" />
					<!-- <Scale Factor="0" Duration=".1" /> -->
					<!-- <Change loadingPanel.Opacity="1" Duration=".1" /> -->
				</WhileTrue>
			</WhileEnabled>
			<Panel>
				<StackPanel Orientation="Horizontal" Alignment="BottomCenter" ItemSpacing="20">
					<Panel ux:Name="loginButtonOK" Width="100" Offset="0%,50%" Height="40" HitTestMode="LocalBoundsAndChildren">
						<Rectangle Color="Green" CornerRadius="10">
							<Text Value="DONE" Alignment="Center" Color="White" />
						</Rectangle>
						<Clicked>
							<Callback Handler="{changeState}" />
						</Clicked>
					</Panel>
					<Panel ux:Name="loginButtonCancel" Width="100" Offset="0%,50%" Height="40" HitTestMode="LocalBoundsAndChildren">
						<Rectangle Color="Green" CornerRadius="10">
							<Text Value="CANCEL" Alignment="Center" Color="White" />
						</Rectangle>
						<Clicked>
							<Callback Handler="{changeState}" />
						</Clicked>
					</Panel>
				</StackPanel>
			</Panel>
		</HidingPanel>

		<!-- Log in / sign up buttons -->
		<HidingPanel ux:Name="startPanel" Alignment="Bottom" Height="50%" Padding="15,0,15,15">
			<StackPanel ItemSpacing="20">
				<Panel ux:Name="loginButton" Width="120" Height="35" Alignment="Top" HitTestMode="LocalBounds">
					<Text Value="LOG IN" Alignment="Center" Color="#000000" HitTestMode="LocalBounds" />
					<Clicked>
						<Callback Handler="{changeState}" />
					</Clicked>
				</Panel>
				<Panel ux:Name="signupButton" Width="120" Height="35" Alignment="Top" HitTestMode="LocalBounds">
					<Text Value="SIGN UP" Alignment="Center" Color="#000000" HitTestMode="LocalBounds" />
					<Clicked>
						<Callback Handler="{changeState}" />
					</Clicked>
				</Panel>
			</StackPanel>
		</HidingPanel>

		<!-- White rectangle. Button background, and morphs into form background - DUPLICATE THIS FOR LOGIN -->
		<Rectangle ux:Name="whiteRectSignup" Color="White" LayoutMaster="signupButton" Layer="Background" CornerRadius="25" Opacity="0">
			<WhileTrue ux:Name="showWhiteRectSignup">
				<Change whiteRectSignup.Opacity="1" Duration="0.2" />
			</WhileTrue>
		</Rectangle>
		<Attractor ux:Name="whiteRectSignupCornerRadiusAttractor" Target="whiteRectSignup.CornerRadius" Value="25" Type="SmoothSnap" Unit="Points" />

		<Rectangle ux:Name="whiteRectLogin" Color="White" LayoutMaster="loginButton" Layer="Background" CornerRadius="25" Opacity="0">
			<WhileTrue ux:Name="showWhiteRectLogin">
				<Change whiteRectLogin.Opacity="1" Duration="0.2" />
			</WhileTrue>
		</Rectangle>
		<Attractor ux:Name="whiteRectLoginCornerRadiusAttractor" Target="whiteRectLogin.CornerRadius" Value="25" Type="SmoothSnap" Unit="Points" />

		<!-- Logo -->
		<HidingPanel ux:Name="logoPanel" Alignment="Top" Height="50%" IsEnabled="false" HitTestMode="None" Layer="Background">
			<StackPanel Alignment="Center">
				<Image ux:Name="logo" File="icons/locked_180px.png" Width="180" />
				<!-- <StackPanel ux:Name="logoMockText">
					<Rectangle Color="TopGray"  Width="60%" Height="10" CornerRadius="5" Margin="0,40,0,0" />
					<Rectangle Color="BottomGray" Width="50%" Height="10" CornerRadius="5" Margin="0,16,0,0" />
				</StackPanel> -->
			</StackPanel>
			<WhileTrue ux:Name="moveLogo">
				<!-- <Move Target="logo" Y="-0.4" RelativeTo="Size" Duration="0.5" Delay="0.3" Easing="CubicInOut" /> -->
			</WhileTrue>

			<WhileKeyboardVisible>
				<Change logoPanel.IsEnabled="false" />
			</WhileKeyboardVisible>
		</HidingPanel>

		<!-- Switch between all our states -->
		<!-- Loading, buttons, forms, main -->
		<StateGroup ux:Name="state" Transition="Exclusive" Rest="loadingState" Active="{activeState}" >
			<State Name="loadingState">
				<Callback Handler="{changeStateCallback}" />
				<Set showWhiteRectSignup.Value="false" />
				<Change startPanel.IsEnabled="false" DelayBack="0" />
				<Set moveLogo.Value="false" />
				<Change loadingPanel.Opacity="1" Duration=".4" />
				<Change statusOutput.Visibility="Visible" />
			</State>
			<State Name="loginButtonState">
				<Change mainPanel.Opacity="0" Duration=".5" />
				<Callback Handler="{changeStateCallback}" />
				<Move Target="whiteRectSignup" RelativeTo="PositionOffset" RelativeNode="signupButton"
						Vector="1" Duration="0.2" DurationBack="0" />
				<Resize Target="whiteRectSignup" RelativeTo="Size" RelativeNode="signupButton"
						Vector="1" Duration="0.2" DurationBack="0" />
				<Move Target="whiteRectLogin" RelativeTo="PositionOffset" RelativeNode="loginButton"
						Vector="1" Duration="0.2" DurationBack="0" />
				<Resize Target="whiteRectLogin" RelativeTo="Size" RelativeNode="loginButton"
						Vector="1" Duration="0.2" DurationBack="0" />

				<!-- <Change loadingPanel.Opacity="0" Duration=".2" /> -->
				<Change statusOutput.Visibility="Visible" />
				<Change logoPanel.IsEnabled="true" />

				<Set whiteRectSignup.LayoutMaster="signupButton" Delay="0.2" />
				<Set whiteRectLogin.LayoutMaster="loginButton" Delay="0.2" />

				<Set whiteRectSignupCornerRadiusAttractor.Value="25" />
				<Set whiteRectLoginCornerRadiusAttractor.Value="25" />
				<Set showWhiteRectSignup.Value="true" />
				<Set showWhiteRectLogin.Value="true" />

				<Change startPanel.IsEnabled="true" DelayBack="0" />
				<Set moveLogo.Value="true" />
			</State>
			<State Name="signupFormState">
				<Callback Handler="{changeStateCallback}" />
				<Set whiteRectSignupCornerRadiusAttractor.Value="5" />
				<Move Target="whiteRectSignup" RelativeTo="PositionOffset" RelativeNode="signupForm"
						Vector="1" Duration="0.4" Delay="0.2" DurationBack="0" Easing="CubicInOut" />
				<Resize Target="whiteRectSignup" RelativeTo="Size" RelativeNode="signupForm"
						Vector="1" Duration="0.4" Delay="0.2" DurationBack="0" Easing="CubicInOut" />
				
				<!-- <Move Target="statusOutput" RelativeTo="PositionOffset" RelativeNode="signupForm"
						Vector="1" Duration="1" Delay="0" Easing="CubicInOut" DurationBack="0" Y="500" /> -->
				
				<Set whiteRectSignup.LayoutMaster="signupForm" Delay="0.6" />

				<Change signupForm.IsEnabled="true" Delay="0.6" DelayBack="0" />
				<Change statusOutput.Visibility="Visible" />
				<Change whiteRectLogin.Opacity="0" Duration=".2" />
				<Set showWhiteRectSignup.Value="true" />
				<Set showWhiteRectLogin.Value="false" />
				<Set moveLogo.Value="true" />
				
			</State>
			<State Name="loginFormState">
				<Callback Handler="{changeStateCallback}" />
				<Set whiteRectLoginCornerRadiusAttractor.Value="5" />
				<Move Target="whiteRectLogin" RelativeTo="PositionOffset" RelativeNode="loginForm"
						Vector="1" Duration="0.4" Delay="0.2" DurationBack="0" Easing="CubicInOut" />
				<Resize Target="whiteRectLogin" RelativeTo="Size" RelativeNode="loginForm"
						Vector="1" Duration="0.4" Delay="0.2" DurationBack="0" Easing="CubicInOut" />
				
				<Set whiteRectLogin.LayoutMaster="loginForm" Delay="0.6" />

				<Change loginForm.IsEnabled="true" Delay="0.6" DelayBack="0" />
				<Change statusOutput.Visibility="Visible" />
				<Change whiteRectSignup.Opacity="0" Duration=".2" />

				<Set showWhiteRectSignup.Value="false" />
				<Set showWhiteRectLogin.Value="true" />
				<Set moveLogo.Value="true" />
			</State>
			<State Name="mainState">
				<Callback Handler="{changeStateCallback}" />
				<Move Target="whiteRectSignup" RelativeTo="PositionOffset" RelativeNode="edgeNav"
						Vector="1" Duration="0.4" Delay="0.05" Easing="CubicInOut" DurationBack="0" />
				<Resize Target="whiteRectSignup" RelativeTo="Size" RelativeNode="edgeNav"
						Vector="1" Duration="0.4" Delay="0.05" Easing="CubicInOut" DurationBack="0" />
				<Move Target="whiteRectLogin" RelativeTo="PositionOffset" RelativeNode="edgeNav"
						Vector="1" Duration="0.4" Delay="0.05" Easing="CubicInOut" DurationBack="0" />
				<Resize Target="whiteRectLogin"  RelativeTo="Size" RelativeNode="edgeNav"
						Vector="1" Duration="0.4" Delay="0.05" Easing="CubicInOut" DurationBack="0" />
				
				<Change whiteRectSignup.Color="ThemeBlue" Duration="0.6" />
				<Change whiteRectLogin.Color="ThemeBlue" Duration="0.6" />

				<Set whiteRectSignup.LayoutMaster="edgeNav" Delay="0.45" />
				<Set whiteRectLogin.LayoutMaster="edgeNav" Delay="0.45" />

				<Change whiteRectSignup.CornerRadius="0" Duration="0.2" DurationBack="0" />
				<Change whiteRectLogin.CornerRadius="0" Duration="0.2" DurationBack="0" />
				<Change logoPanel.IsEnabled="false" />
				<Set whiteRectSignupCornerRadiusAttractor.Value="0" />
				<Set whiteRectLoginCornerRadiusAttractor.Value="0" />

				<Change mainPanel.IsEnabled="true" Delay="0.9" />
				<Change topPanel.IsEnabled="true" />
				<Change edgeNav.IsEnabled="true" />

				<Set showWhiteRectSignup.Value="true" Delay="2" />
				<Set showWhiteRectLogin.Value="true" Delay="2" />
				<Change statusOutput.Visibility="Visible" />
				<Set mainPanel.Opacity="1" />
			</State>
		</StateGroup>
	</ClientPanel>
</App>
